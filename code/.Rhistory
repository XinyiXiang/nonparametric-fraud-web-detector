library(xgboost)
library(h2o)
?xgboost
plot(classifier,data=train,formula = Result ~.,)
classifier <- svm(formula = Result ~.,
data = train,
type = 'C-classification',
kernel = 'linear')
library(e1071)
training$Result = factor(training$Result, levels = c(0, 1))
#different levels causes an issue here,
#stick with just training and break it into halves
old <- readARFF("old.arff")
library(h2o)
h2o.init()
svm <- h2o.psvm(
gamma = 0.05,
rank_ratio = 0.05,
y = "Result",
training_frame = as.h2o(training),
disable_training_metrics = FALSE
)
# Different levels causes an issue
# stick with just training and break it into halves
old <- readARFF("../data/old.arff")
data <- readARFF("../data/TrainingDataset.arff")
##############################################################
# Load packages
set.seed(499)
pkgs <- c("farff", "randomForest", "caret", "ggplot2")
for(pkg in pkgs){
if(!(pkg %in% rownames(installed.packages()))){
install.packages(pkg, dependencies = TRUE)
}
lapply(pkg, FUN = function(X){
do.call("require", list(X))
})
}
setwd("~/Documents/GitHub/STAT499/fraud-web-detector/code")
# Different levels causes an issue
# stick with just training and break it into halves
old <- readARFF("../data/old.arff")
# Different levels causes an issue
# stick with just training and break it into halves
old <- readARFF("../data/old.arff")
data <- readARFF("../data/TrainingDataset.arff")
# Split training into train and test set
ind <- sample(2, nrow(training), replace = TRUE, prob = c(0.7, 0.3))
# Split training into train and test set
ind <- sample(2, nrow(data), replace = TRUE, prob = c(0.7, 0.3))
train <- data[ind==1,]
test <- data[ind==2,]
library(h2o)
h2o.init()
svm <- h2o.psvm(
gamma = 0.05,
rank_ratio = 0.05,
y = "Result",
training_frame = as.h2o(training),
disable_training_metrics = FALSE
)
svm <- h2o.psvm(
gamma = 0.05,
rank_ratio = 0.05,
y = "Result",
training_frame = as.h2o(data),
disable_training_metrics = FALSE
)
plot.svm(svm)
library(h2o)
perf <- h2o.performance(svm)
View(perf)
perf
train
svm <- h2o.psvm(
gamma = 0.01,
rank_ratio = 0.1,
y = "Result",
training_frame = as.h2o(train),
disable_training_metrics = FALSE
)
perf <- h2o.performance(svm)
perf
View(train)
