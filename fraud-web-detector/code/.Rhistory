distribution = qunif,
color="red",
title="QQ Plot of p-values simulated from Norm(5, 1)
compared to those from Unif(0,1)",
dparams=list(
min=min(null_sim),
max=max(null_sim)
)) %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1))
gf_qq(~null_sim,
distribution = qunif,
color="red",
title="QQ Plot of p-values simulated from Norm(6, 1)
compared to those Unif(0,1)",
dparams=list(
min=min(null_sim),
max=max(null_sim)
)) %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1))
## Prob 2c
gf_qq(~null_sim,
distribution = qunif,
color="red",
title="QQ Plot of p-values simulated from Norm(5, 1)",
subtitle= "Overlaid with Unif(0,1)",
dparams=list(
min=min(null_sim),
max=max(null_sim)
)) %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1))
## Prob 2c
gf_qq(~null_sim,
distribution = qunif,
color="red",
title="QQ Plot of p-values simulated from Norm(5, 1)",
subtitle= "Overlaid with Unif(0,1)",
dparams=list(
min=min(null_sim),
max=max(null_sim)
)) %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1)) + theme(plot.title=element_text(hjust=0.5))
## Prob 2c
gf_qq(~null_sim,
distribution = qunif,
color="red",
title="QQ Plot of p-values simulated from Norm(5, 1)",
subtitle= "Overlaid with Unif(0,1)",
dparams=list(
min=min(null_sim),
max=max(null_sim)
)) + theme(plot.title=element_text(hjust=0.5)) %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1)) + theme(plot.title=element_text(hjust=0.5))
## Prob 2c
gf_qq(~null_sim,
distribution = qunif,
color="red",
title="QQ Plot of p-values simulated from Norm(5, 1)",
subtitle= "Overlaid with Unif(0,1)",
dparams=list(
min=min(null_sim),
max=max(null_sim)
)) %>% theme(plot.title=element_text(hjust=0.5)) %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1)) + theme(plot.title=element_text(hjust=0.5))
## Prob 2c
gf_qq(~null_sim,
distribution = qunif,
color="red",
title="QQ Plot of p-values simulated from Norm(5, 1)",
subtitle= "Overlaid with Unif(0,1)",
dparams=list(
min=min(null_sim),
max=max(null_sim)
))  %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1)) +
theme(plot.title=element_text(hjust=0.5), theme(plot.title=element_text(hjust=0.5)))
## Prob 2c
gf_qq(~null_sim,
distribution = qunif,
color="red",
title="QQ Plot of p-values simulated from Norm(5, 1)",
subtitle= "Overlaid with Unif(0,1)",
dparams=list(
min=min(null_sim),
max=max(null_sim)
))  %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1)) +
theme(plot.title=element_text(hjust=0.5), theme(plot.subtitle=element_text(hjust=0.5)))
## Prob 2c
gf_qq(~null_sim,
distribution = qunif,
color="red",
title="QQ Plot of p-values simulated from Norm(5, 1)",
subtitle= "Overlaid with Unif(0,1)",
dparams=list(
min=min(null_sim),
max=max(null_sim)
))  %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1))
+ theme(plot.title=element_text(hjust=0.5),
plot.subtitle=element_text(hjust=0.5))
## Prob 2c
gf_qq(~null_sim,
distribution = qunif,
color="red",
title="QQ Plot of p-values simulated from Norm(5, 1)",
subtitle= "Overlaid with Unif(0,1)",
dparams=list(
min=min(null_sim),
max=max(null_sim)
))  %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1))
+ theme(plot.title=element_text(hjust=0.5),
plot.subtitle=element_text(hjust=0.5))
## Prob 2c
gf_qq(~null_sim,
distribution = qunif,
color="red",
title="QQ Plot of p-values simulated from Norm(5, 1)",
subtitle= "Overlaid with Unif(0,1)",
dparams=list(
min=min(null_sim),
max=max(null_sim)
))  %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1)) +
theme(plot.title=element_text(hjust=0.5),
plot.subtitle=element_text(hjust=0.5))
gf_qq(~null_sim,
distribution = qunif,
color="red",
title="QQ Plot of p-values simulated from Norm(6, 1)",
subtitle= "Overlaid with Unif(0,1)",
dparams=list(
min=min(null_sim),
max=max(null_sim)
)) %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1))+
theme(plot.title=element_text(hjust=0.5),
plot.subtitle=element_text(hjust=0.5))
## Prob 2b
null_sim <- tibble(pvals=replicate(n=1000,
z.test(x = rnorm(n = 25, mean = 5, sd = 1),
alternative = "two.sided",
mu0 = 5,
sd = 1)))
## Prob 2c
gf_qq(~null_sim$pvals,
distribution = qunif,
color="red",
title="QQ Plot of p-values simulated from Norm(5, 1)",
subtitle= "Overlaid with Unif(0,1)",
dparams=list(
min=min(c(null_sim$pvals)),
max=max(c(null_sim$pvals))
))  %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1)) +
theme(plot.title=element_text(hjust=0.5),
plot.subtitle=element_text(hjust=0.5))
# Homework 6
library(fastR2)
library(tidyverse)
## Prob 2b
null_sim <- tibble(pvals=replicate(n=1000,
z.test(x = rnorm(n = 25, mean = 5, sd = 1),
alternative = "two.sided",
mu0 = 5,
sd = 1)))
## Prob 2c
gf_qq(~null_sim$pvals,
distribution = qunif,
color="red",
title="QQ Plot of p-values simulated from Norm(5, 1)",
subtitle= "Overlaid with Unif(0,1)",
dparams=list(
min=min(c(null_sim$pvals)),
max=max(c(null_sim$pvals))
))  %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1)) +
theme(plot.title=element_text(hjust=0.5),
plot.subtitle=element_text(hjust=0.5))
## Prob 2d
null_sim <- tibble(pvals=replicate(n=1000,
z.test(x = rnorm(n = 10, mean = 6, sd = 1),
alternative = "two.sided",
mu0 = 5,
sd = 1)))
gf_qq(~null_sim$pvals,
distribution = qunif,
color="red",
title="QQ Plot of p-values simulated from Norm(6, 1)",
subtitle= "Overlaid with Unif(0,1)",
dparams=list(
min=min(c(null_sim$pvals)),
max=max(c(null_sim$pvals))
)) %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1))+
theme(plot.title=element_text(hjust=0.5),
plot.subtitle=element_text(hjust=0.5))
## Prob 2c
gf_qq(~null_sim$pvals,
distribution = qunif,
color="red",
title="QQ Plot of p-values simulated from Norm(5, 1)",
subtitle= "Overlaid with Unif(0,1)",
dparams=list(
min=min(c(null_sim$pvals)),
max=max(c(null_sim$pvals))
))  %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1)) +
theme(plot.title=element_text(hjust=0.5),
plot.subtitle=element_text(hjust=0.5))
knitr::opts_chunk$set(echo = TRUE)
## Prob 2c
gf_qq(~null_sim$pvals,
distribution = qunif,
color="red",
title="QQ Plot of p-values simulated from Norm(5, 1)",
subtitle= "Overlaid with Unif(0,1)",
dparams=list(
min=min(c(null_sim$pvals)),
max=max(c(null_sim$pvals))
))  %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1)) +
theme(plot.title=element_text(hjust=0.5),
plot.subtitle=element_text(hjust=0.5))
## Prob 2b
null_sim <- tibble(pvals=replicate(n=1000,
z.test(x = rnorm(n = 25, mean = 5, sd = 1),
alternative = "two.sided",
mu0 = 5,
sd = 1)))
library(farff) #Read .arff data
library(randomForest) #Random Forest function
library(caret) # Confusion Matrix function
setwd("~/Documents/GitHub/STAT499/fraud-web-detector/code")
#different levels causes an issue here,
#stick with just training and break it into halves
old <- readARFF("old.arff")
training <- readARFF("TrainingDataset.arff")
#split training into train and test set
set.seed(122)
ind <- sample(2, nrow(training), replace = TRUE, prob = c(0.7, 0.3))
train <- training[ind==1,]
test <- training[ind==2,]
#use every predictor
rf1 <- randomForest(Result~.,data=train)
#get a sense of the most important predictors
varImpPlot(rf1,
sort = T,
n.var = 10)
#large model has 98% accuracy
train.error1 <- predict(rf1, train)
confusionMatrix(train.error1, train$Result)
#small model has 93% accuracy
train.error2 <- predict(rf2, train)
#only the 5 most important predictors
rf2 <- randomForest(Result~SSLfinal_State
+ URL_of_Anchor
+ web_traffic
+ having_Sub_Domain
+ Prefix_Suffix,data=train)
#small model has 93% accuracy
train.error2 <- predict(rf2, train)
confusionMatrix(train.error2, train$Result)
train.error1
shiny::runApp()
#---------------Loading the packages------------------------------------
set.seed(499)
pkgs <- c("shiny", "shinydashboard")
for(pkg in pkgs){
if(!(pkg %in% rownames(installed.packages()))){
install.packages(pkg, dependencies = TRUE)
}
lapply(pkg, FUN = function(X){
do.call("require", list(X))
})
}
ui <- dashboardPage(
skin = "purple",
dashboardHeader(title = "Phishing Detection",
dropdownMenu(
type = "notifications",
notificationItem(
text = "Phishing possibility exceeds 86%",
icon = icon("exclamation-triangle"),
status = "danger"
)
)),
dropdownMenu(type = "tasks", badgeStatus = "warning",
taskItem(value = 17, color = "aqua",
"Random Forest"),
taskItem(value = 65, color = "yellow",
"XG Boost"),
taskItem(value = 89, color = "red",
"SVM")
)
),
dashboardSidebar(
sidebarMenu(
menuItem("Random Forest", tabName = "rf", icon = icon("th")),
menuItem("XG Boost", tabName = "xg", icon = icon("th")),
menuItem("SVM", tabName = "svm", icon = icon("th"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "rf",
fluidPage(
fluidRow(
infoBoxOutput("averageBox"),
infoBoxOutput("approvalBox")
)
)
),
tabItem(tabName = "xg",
h2("XG boost content")
),
tabItem(tabName = "svm",
h2("Support vector machine content")
)
)
)
server <- function(input, output) {
output$averageBox <- renderInfoBox({
infoBox("Non-phishing Confirmed", "80%",
icon = icon("thumbs-up",
lib = "glyphicon"),
color = "yellow"
)
})
output$approvalBox <- renderInfoBox({
infoBox("Progress",
paste0(25 + input$count, "%"),
icon = icon("list"),
color = "purple"
)
})
output$installed_datasets <- renderValueBox({
valueBox(
length(),
icon = icon("folder-open"),
color = "purple"
)
})
}
shinyApp(ui, server)
# pkgs <- c("shiny", "shinydashboard")
#
# for(pkg in pkgs){
#   if(!(pkg %in% rownames(installed.packages()))){
#     install.packages(pkg, dependencies = TRUE)
#   }
#   lapply(pkg, FUN = function(X){
#     do.call("require", list(X))
#   })
# }
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
skin = "purple",
dashboardHeader(title = "Phishing Detection",
dropdownMenu(
type = "notifications",
notificationItem(
text = "Phishing possibility exceeds 86%",
icon = icon("exclamation-triangle"),
status = "danger"
)
)),
dropdownMenu(type = "tasks", badgeStatus = "warning",
taskItem(value = 17, color = "aqua",
"Random Forest"),
taskItem(value = 65, color = "yellow",
"XG Boost"),
taskItem(value = 89, color = "red",
"SVM")
)
),
dashboardSidebar(
sidebarMenu(
menuItem("Random Forest", tabName = "rf", icon = icon("th")),
menuItem("XG Boost", tabName = "xg", icon = icon("th")),
menuItem("SVM", tabName = "svm", icon = icon("th"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "rf",
fluidPage(
fluidRow(
infoBoxOutput("averageBox"),
infoBoxOutput("approvalBox")
)
)
),
tabItem(tabName = "xg",
h2("XG boost content")
),
tabItem(tabName = "svm",
h2("Support vector machine content")
)
)
)
server <- function(input, output) {
output$averageBox <- renderInfoBox({
infoBox("Non-phishing Confirmed", "80%",
icon = icon("thumbs-up",
lib = "glyphicon"),
color = "yellow"
)
})
output$approvalBox <- renderInfoBox({
infoBox("Progress",
paste0(25 + input$count, "%"),
icon = icon("list"),
color = "purple"
)
})
output$installed_datasets <- renderValueBox({
valueBox(
length(),
icon = icon("folder-open"),
color = "purple"
)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
skin = "purple",
dashboardHeader(title = "Phishing Detection",
dropdownMenu(
type = "notifications",
notificationItem(
text = "Phishing possibility exceeds 86%",
icon = icon("exclamation-triangle"),
status = "danger"
)
)),
dropdownMenu(type = "tasks", badgeStatus = "warning",
taskItem(value = 17, color = "aqua",
"Random Forest"),
taskItem(value = 65, color = "yellow",
"XG Boost"),
taskItem(value = 89, color = "red",
"SVM")
)
),
dashboardSidebar(
sidebarMenu(
menuItem("Random Forest", tabName = "rf", icon = icon("th")),
menuItem("XG Boost", tabName = "xg", icon = icon("th")),
menuItem("SVM", tabName = "svm", icon = icon("th"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "rf",
fluidPage(
fluidRow(
infoBoxOutput("averageBox"),
infoBoxOutput("approvalBox")
)
)
),
tabItem(tabName = "xg",
h2("XG boost content")
),
tabItem(tabName = "svm",
h2("Support vector machine content")
)
)
)
server <- function(input, output) {
output$averageBox <- renderInfoBox({
infoBox("Non-phishing Confirmed", "80%",
icon = icon("thumbs-up",
lib = "glyphicon"),
color = "yellow"
)
})
output$approvalBox <- renderInfoBox({
infoBox("Progress",
paste0(25 + input$count, "%"),
icon = icon("list"),
color = "purple"
)
})
output$installed_datasets <- renderValueBox({
valueBox(
length(),
icon = icon("folder-open"),
color = "purple"
)
})
}
shinyApp(ui, server)
