max=max(null_sim)
)) %>%
gf_qqline(distirbution=qunif,
dparams=list(
min=0,
max=1
),
linetype="dashed",
alpha=1)
## Prob 2b
null_sim <- replicate(n=1000,
z.test(x = rnorm(n = 25, mean = 5, sd = 1),
alternative = "two.sided",
mu0 = 5,
sd = 1))
# Display null simulation
null_sim
# Calculate the average p_val in n simulations, ~0.5
mean(null_sim)
## Prob 2c
gf_qq(~null_sim,
distribution = qunif,
color="red",
title="QQ Plot of p-values compared to from Unif(0,1)",
dparams=list(
min=min(null_sim),
max=max(null_sim)
)) %>%
gf_qqline(distirbution=qunif,
dparams=list(
min=0,
max=1
))
## Prob 2c
gf_qq(~null_sim,
distribution = qunif,
color="red",
title="QQ Plot of p-values compared to from Unif(0,1)",
dparams=list(
min=min(null_sim),
max=max(null_sim)
)) %>%
gf_qqline(distirbution=qunif,
dparams=list(
min=0,
max=1
))
## Prob 2c
gf_qq(~null_sim,
distribution = qunif,
color="red",
title="QQ Plot of p-values compared to from Unif(0,1)",
dparams=list(
min=min(null_sim),
max=max(null_sim)
)) %>%
gf_qqline(distirbution=qunif,
dparams=list(
min=0,
max=1
))
## Prob 3
n <- ((1.645*0.4)/0.10)^2
## Prob 2b
null_sim <- replicate(n=1000,
z.test(x = rnorm(n = 25, mean = 5, sd = 1),
alternative = "two.sided",
mu0 = 5,
sd = 1))
# Display null simulation
null_sim
# Calculate the average p_val in n simulations, ~0.5
mean(null_sim)
## Prob 2c
gf_qq(~null_sim,
distribution = qunif,
color="red",
title="QQ Plot of p-values compared to from Unif(0,1)",
dparams=list(
min=min(null_sim),
max=max(null_sim)
)) %>%
gf_qqline(distirbution=qunif,
dparams=list(
min=0,
max=1
))
## Prob 2b
null_sim <- replicate(n=1000,
z.test(x = rnorm(n = 25, mean = 5, sd = 1),
alternative = "two.sided",
mu0 = 5,
sd = 1))
# Display null simulation
null_sim
# Calculate the average p_val in n simulations, ~0.5
mean(null_sim)
## Prob 2c
gf_qq(~null_sim,
distribution = qunif,
color="red",
title="QQ Plot of p-values compared to from Unif(0,1)",
dparams=list(
min=min(null_sim),
max=max(null_sim)
)) %>%
gf_qqline(distirbution=qunif,
dparams=list(
min=0,
max=1
))
## Prob 2c
gf_qq(~null_sim,
distribution = qunif,
color="red",
title="QQ Plot of p-values compared to from Unif(0,1)",
dparams=list(
min=min(null_sim),
max=max(null_sim)
)) %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1))
## Prob 2b
null_sim <- replicate(n=1000,
z.test(x = rnorm(n = 25, mean = 5, sd = 1),
alternative = "two.sided",
mu0 = 5,
sd = 1))
## Prob 2c
gf_qq(~null_sim,
distribution = qunif,
color="red",
title="QQ Plot of p-values compared to from Unif(0,1)",
dparams=list(
min=min(null_sim),
max=max(null_sim)
)) %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1))
```
![qqplot comparison]("~/Documents/GitHub/STAT341/hw6/hw6prob2c.png")
d. Repeat parts b. and c. but this time, simulate 1,000 samples of size $n=10$ from a $Norm( 6, 1)$ distribution. Does the uniform still seem like a good fit for the p-values?
```
\includegraphics{"~/Documents/GitHub/STAT341/hw6/hw6prob2c.png"}
```
\includegraphics{"hw6prob2c.png"}
```
\includegraphics[]{"hw6prob2c.png"}
## Prob 2d
null_sim <- replicate(n=1000,
z.test(x = rnorm(n = 10, mean = 6, sd = 1),
alternative = "two.sided",
mu0 = 5,
sd = 1))
gf_qq(~null_sim,
distribution = qunif,
color="red",
title="QQ Plot of p-values compared to from Unif(0,1)",
dparams=list(
min=min(null_sim),
max=max(null_sim)
)) %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1))
gf_qq(~null_sim,
distribution = qunif,
color="red",
title="QQ Plot of p-values simulated from Norm(6, 1) compared to Unif(0,1)",
dparams=list(
min=min(null_sim),
max=max(null_sim)
)) %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1))
gf_qq(~null_sim,
distribution = qunif,
color="red",
title="QQ Plot of p-values simulated from Norm(6, 1)
compared to Unif(0,1)",
dparams=list(
min=min(null_sim),
max=max(null_sim)
)) %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1))
gf_qq(~null_sim,
distribution = qunif,
color="red",
title="QQ Plot of p-values simulated from Norm(6, 1)
compared to those Unif(0,1)",
dparams=list(
min=min(null_sim),
max=max(null_sim)
)) %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1))
## Prob 2c
gf_qq(~null_sim,
distribution = qunif,
color="red",
title="QQ Plot of p-values compared to those from Unif(0,1)",
dparams=list(
min=min(null_sim),
max=max(null_sim)
)) %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1))
## Prob 2c
gf_qq(~null_sim,
distribution = qunif,
color="red",
title="QQ Plot of p-values simulated from Norm(5, 1)
compared to those from Unif(0,1)",
dparams=list(
min=min(null_sim),
max=max(null_sim)
)) %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1))
gf_qq(~null_sim,
distribution = qunif,
color="red",
title="QQ Plot of p-values simulated from Norm(6, 1)
compared to those Unif(0,1)",
dparams=list(
min=min(null_sim),
max=max(null_sim)
)) %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1))
## Prob 2c
gf_qq(~null_sim,
distribution = qunif,
color="red",
title="QQ Plot of p-values simulated from Norm(5, 1)",
subtitle= "Overlaid with Unif(0,1)",
dparams=list(
min=min(null_sim),
max=max(null_sim)
)) %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1))
## Prob 2c
gf_qq(~null_sim,
distribution = qunif,
color="red",
title="QQ Plot of p-values simulated from Norm(5, 1)",
subtitle= "Overlaid with Unif(0,1)",
dparams=list(
min=min(null_sim),
max=max(null_sim)
)) %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1)) + theme(plot.title=element_text(hjust=0.5))
## Prob 2c
gf_qq(~null_sim,
distribution = qunif,
color="red",
title="QQ Plot of p-values simulated from Norm(5, 1)",
subtitle= "Overlaid with Unif(0,1)",
dparams=list(
min=min(null_sim),
max=max(null_sim)
)) + theme(plot.title=element_text(hjust=0.5)) %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1)) + theme(plot.title=element_text(hjust=0.5))
## Prob 2c
gf_qq(~null_sim,
distribution = qunif,
color="red",
title="QQ Plot of p-values simulated from Norm(5, 1)",
subtitle= "Overlaid with Unif(0,1)",
dparams=list(
min=min(null_sim),
max=max(null_sim)
)) %>% theme(plot.title=element_text(hjust=0.5)) %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1)) + theme(plot.title=element_text(hjust=0.5))
## Prob 2c
gf_qq(~null_sim,
distribution = qunif,
color="red",
title="QQ Plot of p-values simulated from Norm(5, 1)",
subtitle= "Overlaid with Unif(0,1)",
dparams=list(
min=min(null_sim),
max=max(null_sim)
))  %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1)) +
theme(plot.title=element_text(hjust=0.5), theme(plot.title=element_text(hjust=0.5)))
## Prob 2c
gf_qq(~null_sim,
distribution = qunif,
color="red",
title="QQ Plot of p-values simulated from Norm(5, 1)",
subtitle= "Overlaid with Unif(0,1)",
dparams=list(
min=min(null_sim),
max=max(null_sim)
))  %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1)) +
theme(plot.title=element_text(hjust=0.5), theme(plot.subtitle=element_text(hjust=0.5)))
## Prob 2c
gf_qq(~null_sim,
distribution = qunif,
color="red",
title="QQ Plot of p-values simulated from Norm(5, 1)",
subtitle= "Overlaid with Unif(0,1)",
dparams=list(
min=min(null_sim),
max=max(null_sim)
))  %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1))
+ theme(plot.title=element_text(hjust=0.5),
plot.subtitle=element_text(hjust=0.5))
## Prob 2c
gf_qq(~null_sim,
distribution = qunif,
color="red",
title="QQ Plot of p-values simulated from Norm(5, 1)",
subtitle= "Overlaid with Unif(0,1)",
dparams=list(
min=min(null_sim),
max=max(null_sim)
))  %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1))
+ theme(plot.title=element_text(hjust=0.5),
plot.subtitle=element_text(hjust=0.5))
## Prob 2c
gf_qq(~null_sim,
distribution = qunif,
color="red",
title="QQ Plot of p-values simulated from Norm(5, 1)",
subtitle= "Overlaid with Unif(0,1)",
dparams=list(
min=min(null_sim),
max=max(null_sim)
))  %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1)) +
theme(plot.title=element_text(hjust=0.5),
plot.subtitle=element_text(hjust=0.5))
gf_qq(~null_sim,
distribution = qunif,
color="red",
title="QQ Plot of p-values simulated from Norm(6, 1)",
subtitle= "Overlaid with Unif(0,1)",
dparams=list(
min=min(null_sim),
max=max(null_sim)
)) %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1))+
theme(plot.title=element_text(hjust=0.5),
plot.subtitle=element_text(hjust=0.5))
## Prob 2b
null_sim <- tibble(pvals=replicate(n=1000,
z.test(x = rnorm(n = 25, mean = 5, sd = 1),
alternative = "two.sided",
mu0 = 5,
sd = 1)))
## Prob 2c
gf_qq(~null_sim$pvals,
distribution = qunif,
color="red",
title="QQ Plot of p-values simulated from Norm(5, 1)",
subtitle= "Overlaid with Unif(0,1)",
dparams=list(
min=min(c(null_sim$pvals)),
max=max(c(null_sim$pvals))
))  %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1)) +
theme(plot.title=element_text(hjust=0.5),
plot.subtitle=element_text(hjust=0.5))
# Homework 6
library(fastR2)
library(tidyverse)
## Prob 2b
null_sim <- tibble(pvals=replicate(n=1000,
z.test(x = rnorm(n = 25, mean = 5, sd = 1),
alternative = "two.sided",
mu0 = 5,
sd = 1)))
## Prob 2c
gf_qq(~null_sim$pvals,
distribution = qunif,
color="red",
title="QQ Plot of p-values simulated from Norm(5, 1)",
subtitle= "Overlaid with Unif(0,1)",
dparams=list(
min=min(c(null_sim$pvals)),
max=max(c(null_sim$pvals))
))  %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1)) +
theme(plot.title=element_text(hjust=0.5),
plot.subtitle=element_text(hjust=0.5))
## Prob 2d
null_sim <- tibble(pvals=replicate(n=1000,
z.test(x = rnorm(n = 10, mean = 6, sd = 1),
alternative = "two.sided",
mu0 = 5,
sd = 1)))
gf_qq(~null_sim$pvals,
distribution = qunif,
color="red",
title="QQ Plot of p-values simulated from Norm(6, 1)",
subtitle= "Overlaid with Unif(0,1)",
dparams=list(
min=min(c(null_sim$pvals)),
max=max(c(null_sim$pvals))
)) %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1))+
theme(plot.title=element_text(hjust=0.5),
plot.subtitle=element_text(hjust=0.5))
## Prob 2c
gf_qq(~null_sim$pvals,
distribution = qunif,
color="red",
title="QQ Plot of p-values simulated from Norm(5, 1)",
subtitle= "Overlaid with Unif(0,1)",
dparams=list(
min=min(c(null_sim$pvals)),
max=max(c(null_sim$pvals))
))  %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1)) +
theme(plot.title=element_text(hjust=0.5),
plot.subtitle=element_text(hjust=0.5))
knitr::opts_chunk$set(echo = TRUE)
## Prob 2c
gf_qq(~null_sim$pvals,
distribution = qunif,
color="red",
title="QQ Plot of p-values simulated from Norm(5, 1)",
subtitle= "Overlaid with Unif(0,1)",
dparams=list(
min=min(c(null_sim$pvals)),
max=max(c(null_sim$pvals))
))  %>%
gf_qqline(distribution=qunif,
dparams=list(min=0,max=1)) +
theme(plot.title=element_text(hjust=0.5),
plot.subtitle=element_text(hjust=0.5))
## Prob 2b
null_sim <- tibble(pvals=replicate(n=1000,
z.test(x = rnorm(n = 25, mean = 5, sd = 1),
alternative = "two.sided",
mu0 = 5,
sd = 1)))
shiny::runApp('Documents/GitHub/STAT499/fraud-web-detector/code')
# pkgs <- c("shiny", "shinydashboard")
#
# for(pkg in pkgs){
#   if(!(pkg %in% rownames(installed.packages()))){
#     install.packages(pkg, dependencies = TRUE)
#   }
#   lapply(pkg, FUN = function(X){
#     do.call("require", list(X))
#   })
# }
library(shiny)
library(shinydashboard)
runApp('Documents/GitHub/STAT499/fraud-web-detector/code')
runApp('Documents/GitHub/STAT499/fraud-web-detector/code')
runApp()
runApp()
runApp('Documents/GitHub/STAT499/fraud-web-detector/code')
runApp('Documents/GitHub/STAT499/fraud-web-detector/code')
runApp('Documents/GitHub/STAT499/fraud-web-detector/code')
runApp('Documents/GitHub/STAT499/fraud-web-detector/code')
train <- training[ind==1,]
test <- training[ind==2,]
#different levels causes an issue here,
#stick with just training and break it into halves
old <- readARFF("old.arff")
training <- readARFF("TrainingDataset.arff")
#split training into train and test set
set.seed(122)
ind <- sample(2, nrow(training), replace = TRUE, prob = c(0.7, 0.3))
train <- training[ind==1,]
test <- training[ind==2,]
training <- readARFF("TrainingDataset.arff")
set.seed(122)
ind <- sample(2, nrow(training), replace = TRUE, prob = c(0.7, 0.3))
train <- training[ind==1,]
training <- readARFF("TrainingDataset.arff")
setwd("~/Documents/GitHub/STAT499/fraud-web-detector/code")
# var_imp <- h2o.varimp(h2o_df$model)
# var_imp <- var_imp[order(var_imp$scaled_importance),]
# var_order <- var_imp$variable
# var_imp$variable <- factor(var_imp$variable, levels = var_order)
old <- readARFF("old.arff")
training <- readARFF("TrainingDataset.arff")
set.seed(122)
ind <- sample(2, nrow(training), replace = TRUE, prob = c(0.7, 0.3))
train <- training[ind==1,]
test <- training[ind==2,]
rf1 <- randomForest(Result~.,data=train)
View(training)
View(train)
var_imp <- varImpPlot(rf1,
sort = T,
n.var = 10)
View(var_imp)
runApp()
